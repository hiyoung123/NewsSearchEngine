// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NLP {

namespace {

const ::google::protobuf::Descriptor* SegmentResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WordItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WordItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecallRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecallResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortReqItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortReqItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortResItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortResItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* SegmentService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* RecallService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* SortService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_5fservice_2eproto() {
  protobuf_AddDesc_base_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base_service.proto");
  GOOGLE_CHECK(file != NULL);
  SegmentResult_descriptor_ = file->message_type(0);
  static const int SegmentResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentResult, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentResult, tf_),
  };
  SegmentResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentResult_descriptor_,
      SegmentResult::default_instance_,
      SegmentResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentResult));
  SegmentRequest_descriptor_ = file->message_type(1);
  static const int SegmentRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentRequest, sentence_),
  };
  SegmentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentRequest_descriptor_,
      SegmentRequest::default_instance_,
      SegmentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentRequest));
  SegmentResponse_descriptor_ = file->message_type(2);
  static const int SegmentResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentResponse, result_),
  };
  SegmentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentResponse_descriptor_,
      SegmentResponse::default_instance_,
      SegmentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentResponse));
  IndexItem_descriptor_ = file->message_type(3);
  static const int IndexItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexItem, docid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexItem, tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexItem, dl_),
  };
  IndexItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexItem_descriptor_,
      IndexItem::default_instance_,
      IndexItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexItem));
  WordItem_descriptor_ = file->message_type(4);
  static const int WordItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordItem, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordItem, df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordItem, index_item_),
  };
  WordItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WordItem_descriptor_,
      WordItem::default_instance_,
      WordItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WordItem));
  RecallRequest_descriptor_ = file->message_type(5);
  static const int RecallRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallRequest, tokens_),
  };
  RecallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecallRequest_descriptor_,
      RecallRequest::default_instance_,
      RecallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecallRequest));
  RecallResponse_descriptor_ = file->message_type(6);
  static const int RecallResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallResponse, result_),
  };
  RecallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecallResponse_descriptor_,
      RecallResponse::default_instance_,
      RecallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecallResponse));
  SortReqItem_descriptor_ = file->message_type(7);
  static const int SortReqItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReqItem, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReqItem, df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReqItem, qtf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReqItem, index_item_),
  };
  SortReqItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SortReqItem_descriptor_,
      SortReqItem::default_instance_,
      SortReqItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReqItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortReqItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SortReqItem));
  SortRequest_descriptor_ = file->message_type(8);
  static const int SortRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortRequest, item_),
  };
  SortRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SortRequest_descriptor_,
      SortRequest::default_instance_,
      SortRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SortRequest));
  SortResItem_descriptor_ = file->message_type(9);
  static const int SortResItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortResItem, docid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortResItem, score_),
  };
  SortResItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SortResItem_descriptor_,
      SortResItem::default_instance_,
      SortResItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortResItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortResItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SortResItem));
  SortResponse_descriptor_ = file->message_type(10);
  static const int SortResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortResponse, result_),
  };
  SortResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SortResponse_descriptor_,
      SortResponse::default_instance_,
      SortResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SortResponse));
  SegmentService_descriptor_ = file->service(0);
  RecallService_descriptor_ = file->service(1);
  SortService_descriptor_ = file->service(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentResult_descriptor_, &SegmentResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentRequest_descriptor_, &SegmentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentResponse_descriptor_, &SegmentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexItem_descriptor_, &IndexItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WordItem_descriptor_, &WordItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecallRequest_descriptor_, &RecallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecallResponse_descriptor_, &RecallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SortReqItem_descriptor_, &SortReqItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SortRequest_descriptor_, &SortRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SortResItem_descriptor_, &SortResItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SortResponse_descriptor_, &SortResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_5fservice_2eproto() {
  delete SegmentResult::default_instance_;
  delete SegmentResult_reflection_;
  delete SegmentRequest::default_instance_;
  delete SegmentRequest_reflection_;
  delete SegmentResponse::default_instance_;
  delete SegmentResponse_reflection_;
  delete IndexItem::default_instance_;
  delete IndexItem_reflection_;
  delete WordItem::default_instance_;
  delete WordItem_reflection_;
  delete RecallRequest::default_instance_;
  delete RecallRequest_reflection_;
  delete RecallResponse::default_instance_;
  delete RecallResponse_reflection_;
  delete SortReqItem::default_instance_;
  delete SortReqItem_reflection_;
  delete SortRequest::default_instance_;
  delete SortRequest_reflection_;
  delete SortResItem::default_instance_;
  delete SortResItem_reflection_;
  delete SortResponse::default_instance_;
  delete SortResponse_reflection_;
}

void protobuf_AddDesc_base_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022base_service.proto\022\003NLP\"*\n\rSegmentResu"
    "lt\022\r\n\005token\030\001 \002(\t\022\n\n\002TF\030\002 \002(\005\"\"\n\016Segment"
    "Request\022\020\n\010sentence\030\001 \002(\t\"5\n\017SegmentResp"
    "onse\022\"\n\006result\030\001 \003(\0132\022.NLP.SegmentResult"
    "\"2\n\tIndexItem\022\r\n\005DocId\030\001 \002(\005\022\n\n\002TF\030\002 \002(\005"
    "\022\n\n\002dl\030\003 \002(\005\"H\n\010WordItem\022\014\n\004word\030\001 \002(\t\022\n"
    "\n\002DF\030\002 \002(\005\022\"\n\nindex_item\030\003 \003(\0132\016.NLP.Ind"
    "exItem\"\037\n\rRecallRequest\022\016\n\006tokens\030\001 \003(\t\""
    "/\n\016RecallResponse\022\035\n\006result\030\001 \003(\0132\r.NLP."
    "WordItem\"X\n\013SortReqItem\022\014\n\004word\030\001 \002(\t\022\n\n"
    "\002DF\030\002 \002(\005\022\013\n\003qtf\030\003 \002(\005\022\"\n\nindex_item\030\004 \003"
    "(\0132\016.NLP.IndexItem\"-\n\013SortRequest\022\036\n\004ite"
    "m\030\001 \003(\0132\020.NLP.SortReqItem\"+\n\013SortResItem"
    "\022\r\n\005DocId\030\001 \002(\005\022\r\n\005score\030\002 \002(\002\"0\n\014SortRe"
    "sponse\022 \n\006result\030\001 \003(\0132\020.NLP.SortResItem"
    "2B\n\016SegmentService\0220\n\003cut\022\023.NLP.SegmentR"
    "equest\032\024.NLP.SegmentResponse2B\n\rRecallSe"
    "rvice\0221\n\006recall\022\022.NLP.RecallRequest\032\023.NL"
    "P.RecallResponse2:\n\013SortService\022+\n\004sort\022"
    "\020.NLP.SortRequest\032\021.NLP.SortResponseB\003\200\001"
    "\001", 801);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base_service.proto", &protobuf_RegisterTypes);
  SegmentResult::default_instance_ = new SegmentResult();
  SegmentRequest::default_instance_ = new SegmentRequest();
  SegmentResponse::default_instance_ = new SegmentResponse();
  IndexItem::default_instance_ = new IndexItem();
  WordItem::default_instance_ = new WordItem();
  RecallRequest::default_instance_ = new RecallRequest();
  RecallResponse::default_instance_ = new RecallResponse();
  SortReqItem::default_instance_ = new SortReqItem();
  SortRequest::default_instance_ = new SortRequest();
  SortResItem::default_instance_ = new SortResItem();
  SortResponse::default_instance_ = new SortResponse();
  SegmentResult::default_instance_->InitAsDefaultInstance();
  SegmentRequest::default_instance_->InitAsDefaultInstance();
  SegmentResponse::default_instance_->InitAsDefaultInstance();
  IndexItem::default_instance_->InitAsDefaultInstance();
  WordItem::default_instance_->InitAsDefaultInstance();
  RecallRequest::default_instance_->InitAsDefaultInstance();
  RecallResponse::default_instance_->InitAsDefaultInstance();
  SortReqItem::default_instance_->InitAsDefaultInstance();
  SortRequest::default_instance_->InitAsDefaultInstance();
  SortResItem::default_instance_->InitAsDefaultInstance();
  SortResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_5fservice_2eproto {
  StaticDescriptorInitializer_base_5fservice_2eproto() {
    protobuf_AddDesc_base_5fservice_2eproto();
  }
} static_descriptor_initializer_base_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SegmentResult::kTokenFieldNumber;
const int SegmentResult::kTFFieldNumber;
#endif  // !_MSC_VER

SegmentResult::SegmentResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.SegmentResult)
}

void SegmentResult::InitAsDefaultInstance() {
}

SegmentResult::SegmentResult(const SegmentResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.SegmentResult)
}

void SegmentResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tf_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentResult::~SegmentResult() {
  // @@protoc_insertion_point(destructor:NLP.SegmentResult)
  SharedDtor();
}

void SegmentResult::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void SegmentResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentResult_descriptor_;
}

const SegmentResult& SegmentResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

SegmentResult* SegmentResult::default_instance_ = NULL;

SegmentResult* SegmentResult::New() const {
  return new SegmentResult;
}

void SegmentResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    tf_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.SegmentResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TF;
        break;
      }

      // required int32 TF = 2;
      case 2: {
        if (tag == 16) {
         parse_TF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tf_)));
          set_has_tf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.SegmentResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.SegmentResult)
  return false;
#undef DO_
}

void SegmentResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.SegmentResult)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // required int32 TF = 2;
  if (has_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.SegmentResult)
}

::google::protobuf::uint8* SegmentResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.SegmentResult)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required int32 TF = 2;
  if (has_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.SegmentResult)
  return target;
}

int SegmentResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required int32 TF = 2;
    if (has_tf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentResult::MergeFrom(const SegmentResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_tf()) {
      set_tf(from.tf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentResult::CopyFrom(const SegmentResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SegmentResult::Swap(SegmentResult* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(tf_, other->tf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentResult_descriptor_;
  metadata.reflection = SegmentResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentRequest::kSentenceFieldNumber;
#endif  // !_MSC_VER

SegmentRequest::SegmentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.SegmentRequest)
}

void SegmentRequest::InitAsDefaultInstance() {
}

SegmentRequest::SegmentRequest(const SegmentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.SegmentRequest)
}

void SegmentRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sentence_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentRequest::~SegmentRequest() {
  // @@protoc_insertion_point(destructor:NLP.SegmentRequest)
  SharedDtor();
}

void SegmentRequest::SharedDtor() {
  if (sentence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sentence_;
  }
  if (this != default_instance_) {
  }
}

void SegmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentRequest_descriptor_;
}

const SegmentRequest& SegmentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

SegmentRequest* SegmentRequest::default_instance_ = NULL;

SegmentRequest* SegmentRequest::New() const {
  return new SegmentRequest;
}

void SegmentRequest::Clear() {
  if (has_sentence()) {
    if (sentence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      sentence_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.SegmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sentence = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sentence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sentence().data(), this->sentence().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sentence");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.SegmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.SegmentRequest)
  return false;
#undef DO_
}

void SegmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.SegmentRequest)
  // required string sentence = 1;
  if (has_sentence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sentence().data(), this->sentence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sentence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sentence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.SegmentRequest)
}

::google::protobuf::uint8* SegmentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.SegmentRequest)
  // required string sentence = 1;
  if (has_sentence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sentence().data(), this->sentence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sentence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sentence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.SegmentRequest)
  return target;
}

int SegmentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sentence = 1;
    if (has_sentence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sentence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentRequest::MergeFrom(const SegmentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sentence()) {
      set_sentence(from.sentence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentRequest::CopyFrom(const SegmentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SegmentRequest::Swap(SegmentRequest* other) {
  if (other != this) {
    std::swap(sentence_, other->sentence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentRequest_descriptor_;
  metadata.reflection = SegmentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SegmentResponse::SegmentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.SegmentResponse)
}

void SegmentResponse::InitAsDefaultInstance() {
}

SegmentResponse::SegmentResponse(const SegmentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.SegmentResponse)
}

void SegmentResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentResponse::~SegmentResponse() {
  // @@protoc_insertion_point(destructor:NLP.SegmentResponse)
  SharedDtor();
}

void SegmentResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentResponse_descriptor_;
}

const SegmentResponse& SegmentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

SegmentResponse* SegmentResponse::default_instance_ = NULL;

SegmentResponse* SegmentResponse::New() const {
  return new SegmentResponse;
}

void SegmentResponse::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.SegmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NLP.SegmentResult result = 1;
      case 1: {
        if (tag == 10) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.SegmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.SegmentResponse)
  return false;
#undef DO_
}

void SegmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.SegmentResponse)
  // repeated .NLP.SegmentResult result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.SegmentResponse)
}

::google::protobuf::uint8* SegmentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.SegmentResponse)
  // repeated .NLP.SegmentResult result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.SegmentResponse)
  return target;
}

int SegmentResponse::ByteSize() const {
  int total_size = 0;

  // repeated .NLP.SegmentResult result = 1;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentResponse::MergeFrom(const SegmentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentResponse::CopyFrom(const SegmentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void SegmentResponse::Swap(SegmentResponse* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentResponse_descriptor_;
  metadata.reflection = SegmentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexItem::kDocIdFieldNumber;
const int IndexItem::kTFFieldNumber;
const int IndexItem::kDlFieldNumber;
#endif  // !_MSC_VER

IndexItem::IndexItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.IndexItem)
}

void IndexItem::InitAsDefaultInstance() {
}

IndexItem::IndexItem(const IndexItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.IndexItem)
}

void IndexItem::SharedCtor() {
  _cached_size_ = 0;
  docid_ = 0;
  tf_ = 0;
  dl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexItem::~IndexItem() {
  // @@protoc_insertion_point(destructor:NLP.IndexItem)
  SharedDtor();
}

void IndexItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexItem_descriptor_;
}

const IndexItem& IndexItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

IndexItem* IndexItem::default_instance_ = NULL;

IndexItem* IndexItem::New() const {
  return new IndexItem;
}

void IndexItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndexItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(docid_, dl_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.IndexItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DocId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &docid_)));
          set_has_docid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TF;
        break;
      }

      // required int32 TF = 2;
      case 2: {
        if (tag == 16) {
         parse_TF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tf_)));
          set_has_tf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dl;
        break;
      }

      // required int32 dl = 3;
      case 3: {
        if (tag == 24) {
         parse_dl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dl_)));
          set_has_dl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.IndexItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.IndexItem)
  return false;
#undef DO_
}

void IndexItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.IndexItem)
  // required int32 DocId = 1;
  if (has_docid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->docid(), output);
  }

  // required int32 TF = 2;
  if (has_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tf(), output);
  }

  // required int32 dl = 3;
  if (has_dl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.IndexItem)
}

::google::protobuf::uint8* IndexItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.IndexItem)
  // required int32 DocId = 1;
  if (has_docid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->docid(), target);
  }

  // required int32 TF = 2;
  if (has_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tf(), target);
  }

  // required int32 dl = 3;
  if (has_dl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.IndexItem)
  return target;
}

int IndexItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DocId = 1;
    if (has_docid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->docid());
    }

    // required int32 TF = 2;
    if (has_tf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tf());
    }

    // required int32 dl = 3;
    if (has_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexItem::MergeFrom(const IndexItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docid()) {
      set_docid(from.docid());
    }
    if (from.has_tf()) {
      set_tf(from.tf());
    }
    if (from.has_dl()) {
      set_dl(from.dl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexItem::CopyFrom(const IndexItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IndexItem::Swap(IndexItem* other) {
  if (other != this) {
    std::swap(docid_, other->docid_);
    std::swap(tf_, other->tf_);
    std::swap(dl_, other->dl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexItem_descriptor_;
  metadata.reflection = IndexItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WordItem::kWordFieldNumber;
const int WordItem::kDFFieldNumber;
const int WordItem::kIndexItemFieldNumber;
#endif  // !_MSC_VER

WordItem::WordItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.WordItem)
}

void WordItem::InitAsDefaultInstance() {
}

WordItem::WordItem(const WordItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.WordItem)
}

void WordItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  df_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WordItem::~WordItem() {
  // @@protoc_insertion_point(destructor:NLP.WordItem)
  SharedDtor();
}

void WordItem::SharedDtor() {
  if (word_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete word_;
  }
  if (this != default_instance_) {
  }
}

void WordItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WordItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WordItem_descriptor_;
}

const WordItem& WordItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

WordItem* WordItem::default_instance_ = NULL;

WordItem* WordItem::New() const {
  return new WordItem;
}

void WordItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        word_->clear();
      }
    }
    df_ = 0;
  }
  index_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WordItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.WordItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string word = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "word");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DF;
        break;
      }

      // required int32 DF = 2;
      case 2: {
        if (tag == 16) {
         parse_DF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &df_)));
          set_has_df();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_index_item;
        break;
      }

      // repeated .NLP.IndexItem index_item = 3;
      case 3: {
        if (tag == 26) {
         parse_index_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_index_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_index_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.WordItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.WordItem)
  return false;
#undef DO_
}

void WordItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.WordItem)
  // required string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "word");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  // required int32 DF = 2;
  if (has_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->df(), output);
  }

  // repeated .NLP.IndexItem index_item = 3;
  for (int i = 0; i < this->index_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->index_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.WordItem)
}

::google::protobuf::uint8* WordItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.WordItem)
  // required string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "word");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->word(), target);
  }

  // required int32 DF = 2;
  if (has_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->df(), target);
  }

  // repeated .NLP.IndexItem index_item = 3;
  for (int i = 0; i < this->index_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->index_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.WordItem)
  return target;
}

int WordItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string word = 1;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

    // required int32 DF = 2;
    if (has_df()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->df());
    }

  }
  // repeated .NLP.IndexItem index_item = 3;
  total_size += 1 * this->index_item_size();
  for (int i = 0; i < this->index_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->index_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WordItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WordItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WordItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WordItem::MergeFrom(const WordItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_item_.MergeFrom(from.index_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_df()) {
      set_df(from.df());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WordItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordItem::CopyFrom(const WordItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->index_item())) return false;
  return true;
}

void WordItem::Swap(WordItem* other) {
  if (other != this) {
    std::swap(word_, other->word_);
    std::swap(df_, other->df_);
    index_item_.Swap(&other->index_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WordItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WordItem_descriptor_;
  metadata.reflection = WordItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecallRequest::kTokensFieldNumber;
#endif  // !_MSC_VER

RecallRequest::RecallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.RecallRequest)
}

void RecallRequest::InitAsDefaultInstance() {
}

RecallRequest::RecallRequest(const RecallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.RecallRequest)
}

void RecallRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecallRequest::~RecallRequest() {
  // @@protoc_insertion_point(destructor:NLP.RecallRequest)
  SharedDtor();
}

void RecallRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecallRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecallRequest_descriptor_;
}

const RecallRequest& RecallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

RecallRequest* RecallRequest::default_instance_ = NULL;

RecallRequest* RecallRequest::New() const {
  return new RecallRequest;
}

void RecallRequest::Clear() {
  tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.RecallRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tokens = 1;
      case 1: {
        if (tag == 10) {
         parse_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tokens()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tokens(this->tokens_size() - 1).data(),
            this->tokens(this->tokens_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tokens");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tokens;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.RecallRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.RecallRequest)
  return false;
#undef DO_
}

void RecallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.RecallRequest)
  // repeated string tokens = 1;
  for (int i = 0; i < this->tokens_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tokens(i).data(), this->tokens(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tokens");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tokens(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.RecallRequest)
}

::google::protobuf::uint8* RecallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.RecallRequest)
  // repeated string tokens = 1;
  for (int i = 0; i < this->tokens_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokens(i).data(), this->tokens(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tokens");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->tokens(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.RecallRequest)
  return target;
}

int RecallRequest::ByteSize() const {
  int total_size = 0;

  // repeated string tokens = 1;
  total_size += 1 * this->tokens_size();
  for (int i = 0; i < this->tokens_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tokens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecallRequest::MergeFrom(const RecallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tokens_.MergeFrom(from.tokens_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecallRequest::CopyFrom(const RecallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecallRequest::IsInitialized() const {

  return true;
}

void RecallRequest::Swap(RecallRequest* other) {
  if (other != this) {
    tokens_.Swap(&other->tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecallRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecallRequest_descriptor_;
  metadata.reflection = RecallRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecallResponse::kResultFieldNumber;
#endif  // !_MSC_VER

RecallResponse::RecallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.RecallResponse)
}

void RecallResponse::InitAsDefaultInstance() {
}

RecallResponse::RecallResponse(const RecallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.RecallResponse)
}

void RecallResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecallResponse::~RecallResponse() {
  // @@protoc_insertion_point(destructor:NLP.RecallResponse)
  SharedDtor();
}

void RecallResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecallResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecallResponse_descriptor_;
}

const RecallResponse& RecallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

RecallResponse* RecallResponse::default_instance_ = NULL;

RecallResponse* RecallResponse::New() const {
  return new RecallResponse;
}

void RecallResponse::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.RecallResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NLP.WordItem result = 1;
      case 1: {
        if (tag == 10) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.RecallResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.RecallResponse)
  return false;
#undef DO_
}

void RecallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.RecallResponse)
  // repeated .NLP.WordItem result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.RecallResponse)
}

::google::protobuf::uint8* RecallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.RecallResponse)
  // repeated .NLP.WordItem result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.RecallResponse)
  return target;
}

int RecallResponse::ByteSize() const {
  int total_size = 0;

  // repeated .NLP.WordItem result = 1;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecallResponse::MergeFrom(const RecallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecallResponse::CopyFrom(const RecallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecallResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void RecallResponse::Swap(RecallResponse* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecallResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecallResponse_descriptor_;
  metadata.reflection = RecallResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SortReqItem::kWordFieldNumber;
const int SortReqItem::kDFFieldNumber;
const int SortReqItem::kQtfFieldNumber;
const int SortReqItem::kIndexItemFieldNumber;
#endif  // !_MSC_VER

SortReqItem::SortReqItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.SortReqItem)
}

void SortReqItem::InitAsDefaultInstance() {
}

SortReqItem::SortReqItem(const SortReqItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.SortReqItem)
}

void SortReqItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  df_ = 0;
  qtf_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SortReqItem::~SortReqItem() {
  // @@protoc_insertion_point(destructor:NLP.SortReqItem)
  SharedDtor();
}

void SortReqItem::SharedDtor() {
  if (word_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete word_;
  }
  if (this != default_instance_) {
  }
}

void SortReqItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortReqItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortReqItem_descriptor_;
}

const SortReqItem& SortReqItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

SortReqItem* SortReqItem::default_instance_ = NULL;

SortReqItem* SortReqItem::New() const {
  return new SortReqItem;
}

void SortReqItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SortReqItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(df_, qtf_);
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        word_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  index_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SortReqItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.SortReqItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string word = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "word");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DF;
        break;
      }

      // required int32 DF = 2;
      case 2: {
        if (tag == 16) {
         parse_DF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &df_)));
          set_has_df();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_qtf;
        break;
      }

      // required int32 qtf = 3;
      case 3: {
        if (tag == 24) {
         parse_qtf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qtf_)));
          set_has_qtf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_index_item;
        break;
      }

      // repeated .NLP.IndexItem index_item = 4;
      case 4: {
        if (tag == 34) {
         parse_index_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_index_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_index_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.SortReqItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.SortReqItem)
  return false;
#undef DO_
}

void SortReqItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.SortReqItem)
  // required string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "word");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  // required int32 DF = 2;
  if (has_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->df(), output);
  }

  // required int32 qtf = 3;
  if (has_qtf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->qtf(), output);
  }

  // repeated .NLP.IndexItem index_item = 4;
  for (int i = 0; i < this->index_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->index_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.SortReqItem)
}

::google::protobuf::uint8* SortReqItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.SortReqItem)
  // required string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "word");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->word(), target);
  }

  // required int32 DF = 2;
  if (has_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->df(), target);
  }

  // required int32 qtf = 3;
  if (has_qtf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->qtf(), target);
  }

  // repeated .NLP.IndexItem index_item = 4;
  for (int i = 0; i < this->index_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->index_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.SortReqItem)
  return target;
}

int SortReqItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string word = 1;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

    // required int32 DF = 2;
    if (has_df()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->df());
    }

    // required int32 qtf = 3;
    if (has_qtf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qtf());
    }

  }
  // repeated .NLP.IndexItem index_item = 4;
  total_size += 1 * this->index_item_size();
  for (int i = 0; i < this->index_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->index_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortReqItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SortReqItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SortReqItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SortReqItem::MergeFrom(const SortReqItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_item_.MergeFrom(from.index_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_df()) {
      set_df(from.df());
    }
    if (from.has_qtf()) {
      set_qtf(from.qtf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SortReqItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortReqItem::CopyFrom(const SortReqItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortReqItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->index_item())) return false;
  return true;
}

void SortReqItem::Swap(SortReqItem* other) {
  if (other != this) {
    std::swap(word_, other->word_);
    std::swap(df_, other->df_);
    std::swap(qtf_, other->qtf_);
    index_item_.Swap(&other->index_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SortReqItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortReqItem_descriptor_;
  metadata.reflection = SortReqItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SortRequest::kItemFieldNumber;
#endif  // !_MSC_VER

SortRequest::SortRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.SortRequest)
}

void SortRequest::InitAsDefaultInstance() {
}

SortRequest::SortRequest(const SortRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.SortRequest)
}

void SortRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SortRequest::~SortRequest() {
  // @@protoc_insertion_point(destructor:NLP.SortRequest)
  SharedDtor();
}

void SortRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SortRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortRequest_descriptor_;
}

const SortRequest& SortRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

SortRequest* SortRequest::default_instance_ = NULL;

SortRequest* SortRequest::New() const {
  return new SortRequest;
}

void SortRequest::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SortRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.SortRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NLP.SortReqItem item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.SortRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.SortRequest)
  return false;
#undef DO_
}

void SortRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.SortRequest)
  // repeated .NLP.SortReqItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.SortRequest)
}

::google::protobuf::uint8* SortRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.SortRequest)
  // repeated .NLP.SortReqItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.SortRequest)
  return target;
}

int SortRequest::ByteSize() const {
  int total_size = 0;

  // repeated .NLP.SortReqItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SortRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SortRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SortRequest::MergeFrom(const SortRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SortRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortRequest::CopyFrom(const SortRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void SortRequest::Swap(SortRequest* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SortRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortRequest_descriptor_;
  metadata.reflection = SortRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SortResItem::kDocIdFieldNumber;
const int SortResItem::kScoreFieldNumber;
#endif  // !_MSC_VER

SortResItem::SortResItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.SortResItem)
}

void SortResItem::InitAsDefaultInstance() {
}

SortResItem::SortResItem(const SortResItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.SortResItem)
}

void SortResItem::SharedCtor() {
  _cached_size_ = 0;
  docid_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SortResItem::~SortResItem() {
  // @@protoc_insertion_point(destructor:NLP.SortResItem)
  SharedDtor();
}

void SortResItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SortResItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortResItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortResItem_descriptor_;
}

const SortResItem& SortResItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

SortResItem* SortResItem::default_instance_ = NULL;

SortResItem* SortResItem::New() const {
  return new SortResItem;
}

void SortResItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SortResItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(docid_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SortResItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.SortResItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DocId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &docid_)));
          set_has_docid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // required float score = 2;
      case 2: {
        if (tag == 21) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.SortResItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.SortResItem)
  return false;
#undef DO_
}

void SortResItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.SortResItem)
  // required int32 DocId = 1;
  if (has_docid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->docid(), output);
  }

  // required float score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.SortResItem)
}

::google::protobuf::uint8* SortResItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.SortResItem)
  // required int32 DocId = 1;
  if (has_docid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->docid(), target);
  }

  // required float score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.SortResItem)
  return target;
}

int SortResItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DocId = 1;
    if (has_docid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->docid());
    }

    // required float score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortResItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SortResItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SortResItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SortResItem::MergeFrom(const SortResItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docid()) {
      set_docid(from.docid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SortResItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortResItem::CopyFrom(const SortResItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortResItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SortResItem::Swap(SortResItem* other) {
  if (other != this) {
    std::swap(docid_, other->docid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SortResItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortResItem_descriptor_;
  metadata.reflection = SortResItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SortResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SortResponse::SortResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLP.SortResponse)
}

void SortResponse::InitAsDefaultInstance() {
}

SortResponse::SortResponse(const SortResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NLP.SortResponse)
}

void SortResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SortResponse::~SortResponse() {
  // @@protoc_insertion_point(destructor:NLP.SortResponse)
  SharedDtor();
}

void SortResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SortResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortResponse_descriptor_;
}

const SortResponse& SortResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fservice_2eproto();
  return *default_instance_;
}

SortResponse* SortResponse::default_instance_ = NULL;

SortResponse* SortResponse::New() const {
  return new SortResponse;
}

void SortResponse::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SortResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLP.SortResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NLP.SortResItem result = 1;
      case 1: {
        if (tag == 10) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLP.SortResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLP.SortResponse)
  return false;
#undef DO_
}

void SortResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLP.SortResponse)
  // repeated .NLP.SortResItem result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLP.SortResponse)
}

::google::protobuf::uint8* SortResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLP.SortResponse)
  // repeated .NLP.SortResItem result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLP.SortResponse)
  return target;
}

int SortResponse::ByteSize() const {
  int total_size = 0;

  // repeated .NLP.SortResItem result = 1;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SortResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SortResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SortResponse::MergeFrom(const SortResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SortResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortResponse::CopyFrom(const SortResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void SortResponse::Swap(SortResponse* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SortResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortResponse_descriptor_;
  metadata.reflection = SortResponse_reflection_;
  return metadata;
}


// ===================================================================

SegmentService::~SegmentService() {}

const ::google::protobuf::ServiceDescriptor* SegmentService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SegmentService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentService_descriptor_;
}

void SegmentService::cut(::google::protobuf::RpcController* controller,
                         const ::NLP::SegmentRequest*,
                         ::NLP::SegmentResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cut() not implemented.");
  done->Run();
}

void SegmentService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), SegmentService_descriptor_);
  switch(method->index()) {
    case 0:
      cut(controller,
             ::google::protobuf::down_cast<const ::NLP::SegmentRequest*>(request),
             ::google::protobuf::down_cast< ::NLP::SegmentResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SegmentService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NLP::SegmentRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SegmentService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NLP::SegmentResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SegmentService_Stub::SegmentService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SegmentService_Stub::SegmentService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SegmentService_Stub::~SegmentService_Stub() {
  if (owns_channel_) delete channel_;
}

void SegmentService_Stub::cut(::google::protobuf::RpcController* controller,
                              const ::NLP::SegmentRequest* request,
                              ::NLP::SegmentResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

RecallService::~RecallService() {}

const ::google::protobuf::ServiceDescriptor* RecallService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecallService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* RecallService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecallService_descriptor_;
}

void RecallService::recall(::google::protobuf::RpcController* controller,
                         const ::NLP::RecallRequest*,
                         ::NLP::RecallResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method recall() not implemented.");
  done->Run();
}

void RecallService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), RecallService_descriptor_);
  switch(method->index()) {
    case 0:
      recall(controller,
             ::google::protobuf::down_cast<const ::NLP::RecallRequest*>(request),
             ::google::protobuf::down_cast< ::NLP::RecallResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RecallService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NLP::RecallRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& RecallService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NLP::RecallResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

RecallService_Stub::RecallService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RecallService_Stub::RecallService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RecallService_Stub::~RecallService_Stub() {
  if (owns_channel_) delete channel_;
}

void RecallService_Stub::recall(::google::protobuf::RpcController* controller,
                              const ::NLP::RecallRequest* request,
                              ::NLP::RecallResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

SortService::~SortService() {}

const ::google::protobuf::ServiceDescriptor* SortService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SortService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortService_descriptor_;
}

void SortService::sort(::google::protobuf::RpcController* controller,
                         const ::NLP::SortRequest*,
                         ::NLP::SortResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method sort() not implemented.");
  done->Run();
}

void SortService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), SortService_descriptor_);
  switch(method->index()) {
    case 0:
      sort(controller,
             ::google::protobuf::down_cast<const ::NLP::SortRequest*>(request),
             ::google::protobuf::down_cast< ::NLP::SortResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SortService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NLP::SortRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SortService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NLP::SortResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SortService_Stub::SortService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SortService_Stub::SortService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SortService_Stub::~SortService_Stub() {
  if (owns_channel_) delete channel_;
}

void SortService_Stub::sort(::google::protobuf::RpcController* controller,
                              const ::NLP::SortRequest* request,
                              ::NLP::SortResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace NLP

// @@protoc_insertion_point(global_scope)
